const { Schema, model } = require('mongoose');

const systemSchema = new Schema({

  systemId: {
    type: Number,
    required: true,
  },
  title: String,
  description: String,
  isRacingEvent: Boolean,
  scenario: Number,
  stakingPlan: Number,
  scenarioParams: String,
  stakingParams: String,
  mode: String,
  simType: String,
  betType: String,
  racingBetType: String,
  setWallet: Number,
  raceNumbers: String,
  raceDistance: String,
  raceClass: String,
  matchInPlay: Boolean,
  maxEvents: Number,
  maxMarkets: Number,
  minOdds: Number,
  maxOdds: Number,
  maxRunners: Number,
  minRunners: Number,
  maxBackLayRatio: Number,
  maxLiability: Number,
  maxBets: Number,
  minBets: Number,
  minMatched: Number,
  maxBookBackBets: Number,
  minBookLayBets: Number,
  minPlaceWinners: Number,
  maxPlaceWinners: Number,
  stopLoss: Number,
  stopProfit: Number,
  maxLosers: Number,
  maxWinners: Number,
  consecLosers: Number,
  consecWinners: Number,
  betStartingPrice: Boolean,
  unsettledLimit: Number,
  includeCommission: Boolean,
  timeSecsRace: Number,
  nthFavourite: Number,
  numFavourites: Number,
  exclFavourite: Number,
  totalEvents: Number,
  totalMarkets: Number,
  totalBets: Number,
  profitLoss: Number,
  totalLosers: Number,
  totalWinners: Number,
  totalConsecLosers: Number,
  totalConsecWinners: Number,
  unsettledBets: Number,
  currentWallet: Number,
  maxWallet: Number,
  minWallet: Number,
  maxBet: Number,
  textQuery: String,
  eventTypeId: String,
  competitionIds: String,
  marketIds: String,
  venues: String,
  bspOnly: Boolean,
  turnInPlayEnabled: Boolean,
  inPlayOnly: Boolean,
  marketBettingTypes: String,
  marketCountries: String,
  marketTypeCodes: String,
  customTime: Boolean,
  marketFromTime: Date,
  marketToTime: Date,
  withOrders: String,
  raceTypes: String,
  sort: String,
  maxResults: Number,
  marketProjection: String,
  lastStarted: Date,
  lastStopped: Date,
  lastReset: Date,
  statusDesc: String,
  ordering: Number,
  createdAt: {
    type: Date,
    default: Date.now,
    get: (timestamp) => dateFormat(timestamp),
  },
  updatedAt: {
    type: Date,
    default: Date.now,
    get: (timestamp) => dateFormat(timestamp),
  },
});

const System = model('System', systemSchema);

module.exports = System;
